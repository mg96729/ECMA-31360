sep = ","))
df_psid <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
#get mean for each variables in cps, for control only
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
knit_exit()
knitr::knit_exit()
\begin{table}[]
\begin{table}
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
df_cps <- data.frame(utils::read.delim(file = "nswcps.csv",
sep = ","))
df_psid <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
#get mean for each variables in cps, for control only
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat=0))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat=0))
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat))
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat))
dplyr::group_by(df_cps, treat)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat))
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat))
dplyr::group_by(df_cps, treat)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::group_by(df_cps, treat)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
dplyr::summarise_if(df_psid, treat=0, .funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
dplyr::summarise_if(df_psid, .predicate=(treat=0), .funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat=1)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat)%>% dplyr::summarise_all(.funs=list(mean))
m1 <- lm(re78 ∼ treat, data = df_psid)
m1 <- lm(re78∼treat, data = df_psid)
m1 <- lm("re78 ∼ treat", data = df_psid)
m1 <- lm(re78 ∼ treat, data = df_psid)
m1 <- lm(formula = as.formula("re78 ∼ treat"), data = df_psid)
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
df_cps <- data.frame(utils::read.delim(file = "nswcps.csv",
sep = ","))
df_psid <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
#get mean for each variables in cps, for control only
dplyr::group_by(df_cps, treat)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat)%>% dplyr::summarise_all(.funs=list(mean))
fo
m1 <- lm(formula = as.formula("re78 ∼ treat"), data = df_psid)
fo <- as.formula("re78 ∼ treat")
fo <- as.formula("re78∼treat")
fo <- as.formula("re78∼ treat")
fo <- as.formula("re78∼ treat")
fo <- as.formula("re78 ∼ treat")
fo <- as.formula("re78 ∼ 1 + treat")
fo <- as.formula("re78 ∼ 1 + treat")
fo <- as.formula("y ~ x1 + x2 + x3")
m1 <- stats::lm(re7845 ~ treat, data = df_psid)
m1 <- stats::lm(re78 ~ treat, data = df_psid)
m1 <- stats::lm(re78 ~ treat, data = df_psid)
summary(m1)$coefficients["treat", c("Estimate","Std. Error")]
m1 <- stats::lm(re78 ~ treat, data = df_psid)
summary(m1)#$coefficients["treat", c("Estimate","Std. Error")]
m1 <- stats::lm(re78 ~ treat, data = df_psid)
summary(m1)#$coefficients["treat", c("Estimate","Std. Error")]
lmtest::coeftest(m1, vcov. = vcov(m1))
lmtest::coeftest(m1, vcov. = car::hccm(m1, type = "hc0"))
View(df1)
2**3
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m1 <- stats::lm(re78 ~ treat, data = df_psid, vcov. = car::hccm(m1, type = "hc0"))
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m1 <- stats::lm(re78 ~ treat, data = df_psid)
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m2 <- stats::lm(fo, data = df_psid)
#test
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ treat + age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m2 <- stats::lm(fo, data = df_psid)
#test
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
fo1_treat <- as.formula("treat ~ : age + agesq + edu + nodegree+ black + hisp + re74 + re75")
fo1_treat <- as.formula("treat ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75")
s1 <- stats::lm(fo1_treat, data = df_psid)
summary(s1)
e <- s1$residuals
e
e <- s1$residuals
summary(e)
fo1_treat <- as.formula("treat ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75")
s1 <- stats::lm(fo1_treat, data = df_psid)
summary(s1)
e <- s1$residuals
m2 <- lm(re78 ~ e, data = df_psid)
e <- s1$residuals
m2 <- lm(re78 ~ e, data = df_psid)
summary(m2)
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ treat + age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m2 <- stats::lm(fo, data = df_psid)
#test
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
e <- s1$residuals
m2 <- lm(re78 ~ e, data = df_psid)
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
fo1_re78 <- as.formula("re78 ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75")
s2 <- stats::lm(fo1_re78, data = df_psid)
summary(s2)
e_re78 <- s2$residuals
m3 <- lm(e_re78 ~ e_treat, data = df_psid)
#i. treat ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75
fo1_treat <- as.formula("treat ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75")
s1 <- stats::lm(fo1_treat, data = df_psid)
e_treat <- s1$residuals
#ii. re78 ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75
fo1_re78 <- as.formula("re78 ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75")
s2 <- stats::lm(fo1_re78, data = df_psid)
summary(s2)
e_re78 <- s2$residuals
m3 <- lm(e_re78 ~ e_treat, data = df_psid)
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learner"))
#c. OPV list:
colnames(df)
#c. OPV list:
colnames(dt_psid)
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learner"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
colnames(dt_psid)
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
colnames(dt_psid)
pretreat.colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
pretreat.colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
dml_data_psid <- DoubleML::DoubleMLData$new(dt,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
pretreat_colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid
summary(dml_data_psid)
summary(dml_data_psid, .fun = list(mean))
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
summary(dml_data_psid, .fun = list(mean))
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid
#d. run DML_Model
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid
#e. Suppress Warning
lgr::get_logger("mlr3")$set_threshold("warn")
#l(x)=E[re78|X=x]
ml_l_rf <- mlr3::lrn("regr.ranger")
#m(x)=E[treat|X=x]
ml_m_rf <- mlr3::lrn("classif.ranger")
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
pretreat_colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners", "ranger"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
pretreat_colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
#l(x)=E[re78|X=x]
ml_l_rf <- mlr3::lrn("regr.ranger")
#m(x)=E[treat|X=x]
ml_m_rf <- mlr3::lrn("classif.ranger")
# Set seeds for cross-fitting
set.seed(3141)
# Set the DML specification
obj_dml_plr <- DoubleML::DoubleMLPLR$new(dml_data_psid,
ml_l = ml_l_rf, ml_m = ml_m_rf,
n_folds = 2,
score = "partialling out",
apply_cross_fitting = TRUE)
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners", "ranger"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
pretreat_colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
#d. run DML_Model
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid
#e. Suppress Warning
lgr::get_logger("mlr3")$set_threshold("warn")
#f. "First Stage ML"
#l(x)=E[re78|X=x]
ml_l_rf <- mlr3::lrn("regr.ranger")
#m(x)=E[treat|X=x]
ml_m_rf <- mlr3::lrn("classif.ranger")
#g. set training seed and DML
# Set seeds for cross-fitting
set.seed(3141)
# Set the DML specification
obj_dml_plr <- DoubleML::DoubleMLPLR$new(dml_data_psid,
ml_l = ml_l_rf, ml_m = ml_m_rf,
n_folds = 2,
score = "partialling out",
apply_cross_fitting = TRUE)
#h. fit the DML
obj_dml_plr$fit()
obj_dml_plr
m3 <- lm(e_re78 ~ e_treat, data = df_psid)
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
lmtest::coeftest(m1, vcov. = car::hccm(m1, type = "hc0"))
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ treat + age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m2 <- stats::lm(fo, data = df_psid)
#test
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
getwd()
setwd("D:/GitHub/ECMA-31360/Pset5")
getwd()
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
dt_psid <- data.table::as.data.table(utils::read.delim(file = "nswpsid.csv",
sep = ","))
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
dt_psid <- data.table::as.data.table(utils::read.delim(file = "nswpsid.csv",
sep = ","))
View(dt_psid)
#mutate the data table to add additional variables:
dt_psid <-dt_psid %>%
dplyr::mutate(.data=df_psid,
agesq = age**2,
edusq = edu**2,
re74sq = re74**2,
re75sq = re75**2)
#mutate the data table to add additional variables:
dt_psid <-dt_psid %>%
dplyr::mutate(.data=dt_psid,
agesq = age**2,
edusq = edu**2,
re74sq = re74**2,
re75sq = re75**2)
#Write the formula:
#as.formula( )
View(dt_psid)
#mutate the data table to add additional variables:
dt_psid <-dt_psid %>%
dplyr::mutate(.data=dt_psid,
agesq = age**2,
edusq = edu**2,
re74sq = re74**2,
re75sq = re75**2,
u74black = u74*black)
#Write the formula:
#as.formula( )
#mutate the data table to add additional variables:
dt_psid <-dt_psid %>%
dplyr::mutate(.data=dt_psid,
agesq = age**2,
edusq = edu**2,
re74sq = re74**2,
re75sq = re75**2,
u74black = u74*black)
#Write the formula:
pscore_formula <- as.formula("treat ~ age + agesq +edu + edusq + married + nodegree + black + hisp + re74 + re75 + re74sq + re75sq + u74black")
#Linear Regression
lpm <- stats::lm(pscpre_formula, data = dt_psid)
#mutate the data table to add additional variables:
dt_psid <-dt_psid %>%
dplyr::mutate(.data=dt_psid,
agesq = age**2,
edusq = edu**2,
re74sq = re74**2,
re75sq = re75**2,
u74black = u74*black)
#Write the formula:
pscore_formula <- as.formula("treat ~ age + agesq +edu + edusq + married + nodegree + black + hisp + re74 + re75 + re74sq + re75sq + u74black")
#Linear Regression
lpm <- stats::lm(pscore_formula, data = dt_psid)
#Show result
summary(lpm)
#mutate the data table to add additional variables:
dt_psid <-dt_psid %>%
dplyr::mutate(.data=dt_psid,
agesq = age**2,
edusq = edu**2,
re74sq = re74**2,
re75sq = re75**2,
u74black = u74*black)
#Write the formula:
pscore_formula <- as.formula("treat ~ age + agesq +edu + edusq + married + nodegree + black + hisp + re74 + re75 + re74sq + re75sq + u74black")
#OLS estimator for theta
lpm <- stats::lm(pscore_formula, data = dt_psid)
#Show result
summary(lpm$coefficients)
#mutate the data table to add additional variables:
dt_psid <-dt_psid %>%
dplyr::mutate(.data=dt_psid,
agesq = age**2,
edusq = edu**2,
re74sq = re74**2,
re75sq = re75**2,
u74black = u74*black)
#Write the formula:
pscore_formula <- as.formula("treat ~ age + agesq +edu + edusq + married + nodegree + black + hisp + re74 + re75 + re74sq + re75sq + u74black")
#OLS estimator for theta
lpm <- stats::lm(pscore_formula, data = dt_psid)
#Show result
lpm$coefficients
mean(re75)
mean(dt_psid['re75'])
mean(dt_psid$re75)
lpm$coefficients$re75
lpm$coefficients["re75"]
lpm$coefficients["re75"] + 2* lpm$coefficients["re75sq"]*mean(dt_psid$re75)
2* lpm$coefficients["re75sq"]*mean(dt_psid$re75)
2* lpm$coefficients["re75sq"]
lpm$coefficients["re75sq"]
2*lpm$coefficients["re75sq"]
lpm$coefficients["re75"]+2*lpm$coefficients["re75sq"]*mean(dt_psid$re75)
stats::predict(lpm)
p_hat = stats::predict(lpm)
p_hat = stats::predict(lpm)
summary(p_hat)
dt_psid <-dt_psid %>%
dplyr::mutate(.data=dt_psid,
p_lpm = stats::predict(lpm))
View(dt_psid)
dt_psid <-dt_psid %>%
dplyr::mutate(.data=dt_psid,
p_lpm = p_hat)
#this works?! This is magical!!!
View(dt_psid)
nrow(dt_psid[dt_psid$p_lpm<0,])
# Estimate the pscore using Lasso
# Predictor variables
x <- stats::model.matrix(pscore_formula, data = dt_psid)[,-1]
# Outcome variable
y <- dt_psid$treat
# Find the best lambda using cross-validation
set.seed(123)
cv_lasso <- glmnet::cv.glmnet(x, y, alpha = 1)
install_packages_if_needed(c('glmnet'))
# Estimate the pscore using Lasso
# Predictor variables
x <- stats::model.matrix(pscore_formula, data = dt_psid)[,-1]
# Outcome variable
y <- dt_psid$treat
# Find the best lambda using cross-validation
set.seed(123)
cv_lasso <- glmnet::cv.glmnet(x, y, alpha = 1)
# Display the best lambda value
cv_lasso$lambda.min
# Apply Lasso
lasso_propensity <- glmnet::glmnet(x = x, y = y, alpha = 1,
standardize = TRUE,
lambda = cv_lasso$lambda.min)
install_packages_if_needed(c('glmnet'))
# Estimate the pscore using Lasso
# Predictor variables
x <- stats::model.matrix(pscore_formula, data = dt_psid)[,-1]
# Outcome variable
y <- dt_psid$treat
# Find the best lambda using cross-validation
set.seed(123)
cv_lasso <- glmnet::cv.glmnet(x, y, alpha = 1)
# Display the best lambda value
cv_lasso$lambda.min
# Apply Lasso
lasso_propensity <- glmnet::glmnet(x = x, y = y, alpha = 1,
standardize = TRUE,
lambda = cv_lasso$lambda.min)
summary(lasso_propensity)
install_packages_if_needed(c('glmnet'))
# Estimate the pscore using Lasso
# Predictor variables
x <- stats::model.matrix(pscore_formula, data = dt_psid)[,-1]
# Outcome variable
y <- dt_psid$treat
# Find the best lambda using cross-validation
set.seed(123)
cv_lasso <- glmnet::cv.glmnet(x, y, alpha = 1)
# Display the best lambda value
cv_lasso$lambda.min
# Apply Lasso
lasso_propensity <- glmnet::glmnet(x = x, y = y, alpha = 1,
standardize = TRUE,
lambda = cv_lasso$lambda.min)
coefficients(lasso_propensity)
coefficients(lasso_propensity, lpm)
coefficients(lasso_propensity)
coefficients(lpm)
install_packages_if_needed(c('glmnet'))
# Estimate the pscore using Lasso
# Predictor variables
x <- stats::model.matrix(pscore_formula, data = dt_psid)[,-1]
# Outcome variable
y <- dt_psid$treat
# Find the best lambda using cross-validation
set.seed(123)
cv_lasso <- glmnet::cv.glmnet(x, y, alpha = 1)
# Display the best lambda value
cv_lasso$lambda.min
# Apply Lasso
lasso_propensity <- glmnet::glmnet(x = x, y = y, alpha = 1,
standardize = TRUE,
lambda = cv_lasso$lambda.min)
#Display Lasso
summary(lasso_propensity)
#Coefficients estimated by lasso
coefficients(lasso_propensity)
#Coefficients estimated by OLS
coefficients(lpm)
mle <- stats::glm(pscore_formula, family = binomial( ), data = dt_psid)
summary(mle)
p_logit <- stats::predict(mle, type = "response")
summary(p_logit)
dt_psid <-dt_psid %>%
dplyr::mutate(.data=dt_psid,
p_logit = p_logit)
View(dt_psid)
dt_psid <-dt_psid %>%
dplyr::mutate(.data=dt_psid,
p_logit = p_logit)
write.csv(dt_psid,"nswpsid_logit.csv", row.names = FALSE)
