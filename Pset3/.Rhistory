f <- "treat ~"
for (x in list_OPVs){
f <- paste(f, x)
}
lm_obj <- lm(formula = f, data = df)
#Q3
#create formula
f <- "treat ~"
for (x in list_OPVs){
xname <- toString(x)
f <- paste(f, xname)
}
lm_obj <- lm(formula = f, data = df)
#Q3
#create formula
f <- "treat ~"
for (x in list_OPVs){
xname <- toString(x)
f <- paste(f, xname)
}
f
f <- as.formula(f)
#Q3
#create formula
f <- "treat ~"
for (x in list_OPVs){
xname <- toString(x)
f <- paste(f, xname, "+")
}
f
f <- substr(f, 1, nchar(f)-2)
f
lm_obj <- lm(formula = f, data = df)
summary(lm_obj)
summary(lm_obj)$fstatistic
r <- summary(lm_obj)$fstatistic
write.csv(r, "fstat_table.txt", sep=",")
write.table(r, "fstat_table.txt", sep=",")
write.table(r, "fstat_table.txt", sep=",", col.names = FALSE)
#Test "by hand"
stats::pf(q=2, df1=10)
#Test "by hand"
stats::pf(q=2, df1=10, df2=434)
#Test "by hand"
1-stats::pf(q=2, df1=10, df2=434)
group_mean <- df %>%
group_by(treat) %>%
summarise_at(vars(re78),
list(Mean_Frequency = mean))
dt <- data.table(df)
install_packages_if_needed(c("data.table"))
dt <- data.table(df)
#Q1
#spec 0
install_packages_if_needed(c("data.table"))
install_packages_if_needed(c("data.table"))
dt <- data.table(df)
#get mean for each variables, in treated vs control
dplyr::group_by(df, treat)%>% dplyr::summarise_all(.funs=list(mean))
#Q1
#spec 0
dplyr::group_by(df, treat)%>% dplyr::summarise_at(.vars=re78, .funs=list(mean))
#Q1
#spec 0
dplyr::group_by(df, treat)%>% dplyr::summarise_at(.vars="re78", .funs=list(mean))
stats::t.test(re78 ~ treat, data=df)
stats::t.test(re78 ~ treat, data=df)$coefficients
#spec 1
summary(lm(re78 ~ treat, data=df))
#spec 2
summary(lm(re78 ~ treat + nodegree + edu, data=df))
f <- "re78 ~"
for (x in list_OPVs){
xname <- toString(x)
f <- paste(f, xname, "+")
}
f <- paste(f, "treat")
f
summary(lm(formula = f, data = df))
summary(lm(formula=f, data=df))
#spec 3
#create formula
f <- "re78 ~"
for (x in list_OPVs){
xname <- toString(x)
f <- paste(f, xname, "+")
}
f <- paste(f, "treat")
summary(lm(formula = f, data = df))
#spec 4
f <- paste(f, "+ age*treat")
summary(lm(formula=f, data=df))
#spec 4
#add a variable
mean(age)
#spec 4
#add a variable
mean(age, df)
#spec 4
#add a variable
mean(age, data=df)
#spec 4
#add a variable
mean(df$age)
df %>%
mutate(agextreat = (age-mean(df$age))*treat)
df %>%
mutate(.data=df, agextreat = (age-mean(df$age))*treat)
df %>%
dplyr::mutate(.data=df, agextreat = (age-mean(df$age))*treat)
View(df)
summary(lm(formula=f, data=df))
#spec 3
#create formula
f <- "re78 ~"
for (x in list_OPVs){
xname <- toString(x)
f <- paste(f, xname, "+")
}
f <- paste(f, "treat")
summary(lm(formula = f, data = df))
#spec 4
#add a variable
mean(df$age)
df %>%
dplyr::mutate(.data=df, agextreat = (age-mean(df$age))*treat)
f<- paste(f, "+ agextreat")
summary(lm(formula=f, data=df))
#create formula
f <- "re78 ~"
for (x in list_OPVs){
xname <- toString(x)
f <- paste(f, xname, "+")
}
f <- paste(f, "treat")
summary(lm(formula = f, data = df))
#spec 4
#add a variable
mean(df$age)
df <-df %>%
dplyr::mutate(.data=df, agextreat = (age-mean(df$age))*treat)
f<- paste(f, "+ agextreat")
summary(lm(formula=f, data=df))
#Q2 d
#test joint hypothesis
install_packages_if_needed(c("car"))
# Test linear hypotheses
h_matrix = c("treat", "agextreat")
car::linearHypothesis(model = lm(formula=f, data=df), hypothesis.matrix=h_matrix)
car::linearHypothesis(model = lm(formula=f, data=df), hypothesis.matrix=c("treat"))
car::linearHypothesis(model = lm(formula=f, data=df), hypothesis.matrix=c("agextreat"))
install.packages("rmarkdown")
getwd()
#Header
print('hello world')
setwd()
getwd()
setwd("D:\GitHub\ECMA-31360\Pset4")
setwd("D:/GitHub/ECMA-31360/Pset4")
getwd()
source("./Functions.R")
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
df1 <- data.frame(utils::read.delim(file = "nswcps.csv",
sep = ","))
df2 <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
df1 <- data.frame(utils::read.delim(file = "nswcps.csv",
sep = ","))
df2 <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
View(df1)
View(df2)
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
df1 <- data.frame(utils::read.delim(file = "nswcps.csv",
sep = ","))
df2 <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
#get mean for each variables, in control
dplyr::group_by(df1, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
df_cps <- data.frame(utils::read.delim(file = "nswcps.csv",
sep = ","))
df_psid <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
#get mean for each variables, in control
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
dplyr::group_by(df_psid, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
df_cps <- data.frame(utils::read.delim(file = "nswcps.csv",
sep = ","))
df_psid <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
#get mean for each variables in cps, for control only
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
df_cps <- data.frame(utils::read.delim(file = "nswcps.csv",
sep = ","))
df_psid <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
#get mean for each variables in cps, for control only
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
knit_exit()
knitr::knit_exit()
\begin{table}[]
\begin{table}
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
df_cps <- data.frame(utils::read.delim(file = "nswcps.csv",
sep = ","))
df_psid <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
#get mean for each variables in cps, for control only
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat=0))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat=0))
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat))
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat))
dplyr::group_by(df_cps, treat)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat))
dplyr::group_by(df_cps, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::tally(dplyr::group_by(df_cps, treat))
dplyr::group_by(df_cps, treat)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in cps, for control only
dplyr::group_by(df_cps, treat)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
dplyr::summarise_if(df_psid, treat=0, .funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat=0)%>% dplyr::summarise_all(.funs=list(mean))
dplyr::summarise_if(df_psid, .predicate=(treat=0), .funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat=1)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat)%>% dplyr::summarise_all(.funs=list(mean))
m1 <- lm(re78 ∼ treat, data = df_psid)
m1 <- lm(re78∼treat, data = df_psid)
m1 <- lm("re78 ∼ treat", data = df_psid)
m1 <- lm(re78 ∼ treat, data = df_psid)
m1 <- lm(formula = as.formula("re78 ∼ treat"), data = df_psid)
source("./Functions.R")
install_packages_if_needed(c("utils"))
#Import the csv files
df_cps <- data.frame(utils::read.delim(file = "nswcps.csv",
sep = ","))
df_psid <- data.frame(utils::read.delim(file = "nswpsid.csv",
sep = ","))
#get mean for each variables in cps, for control only
dplyr::group_by(df_cps, treat)%>% dplyr::summarise_all(.funs=list(mean))
#get mean for each variables in psid, for control only
dplyr::group_by(df_psid, treat)%>% dplyr::summarise_all(.funs=list(mean))
fo
m1 <- lm(formula = as.formula("re78 ∼ treat"), data = df_psid)
fo <- as.formula("re78 ∼ treat")
fo <- as.formula("re78∼treat")
fo <- as.formula("re78∼ treat")
fo <- as.formula("re78∼ treat")
fo <- as.formula("re78 ∼ treat")
fo <- as.formula("re78 ∼ 1 + treat")
fo <- as.formula("re78 ∼ 1 + treat")
fo <- as.formula("y ~ x1 + x2 + x3")
m1 <- stats::lm(re7845 ~ treat, data = df_psid)
m1 <- stats::lm(re78 ~ treat, data = df_psid)
m1 <- stats::lm(re78 ~ treat, data = df_psid)
summary(m1)$coefficients["treat", c("Estimate","Std. Error")]
m1 <- stats::lm(re78 ~ treat, data = df_psid)
summary(m1)#$coefficients["treat", c("Estimate","Std. Error")]
m1 <- stats::lm(re78 ~ treat, data = df_psid)
summary(m1)#$coefficients["treat", c("Estimate","Std. Error")]
lmtest::coeftest(m1, vcov. = vcov(m1))
lmtest::coeftest(m1, vcov. = car::hccm(m1, type = "hc0"))
View(df1)
2**3
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m1 <- stats::lm(re78 ~ treat, data = df_psid, vcov. = car::hccm(m1, type = "hc0"))
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m1 <- stats::lm(re78 ~ treat, data = df_psid)
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m2 <- stats::lm(fo, data = df_psid)
#test
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ treat + age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m2 <- stats::lm(fo, data = df_psid)
#test
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
fo1_treat <- as.formula("treat ~ : age + agesq + edu + nodegree+ black + hisp + re74 + re75")
fo1_treat <- as.formula("treat ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75")
s1 <- stats::lm(fo1_treat, data = df_psid)
summary(s1)
e <- s1$residuals
e
e <- s1$residuals
summary(e)
fo1_treat <- as.formula("treat ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75")
s1 <- stats::lm(fo1_treat, data = df_psid)
summary(s1)
e <- s1$residuals
m2 <- lm(re78 ~ e, data = df_psid)
e <- s1$residuals
m2 <- lm(re78 ~ e, data = df_psid)
summary(m2)
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ treat + age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m2 <- stats::lm(fo, data = df_psid)
#test
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
e <- s1$residuals
m2 <- lm(re78 ~ e, data = df_psid)
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
fo1_re78 <- as.formula("re78 ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75")
s2 <- stats::lm(fo1_re78, data = df_psid)
summary(s2)
e_re78 <- s2$residuals
m3 <- lm(e_re78 ~ e_treat, data = df_psid)
#i. treat ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75
fo1_treat <- as.formula("treat ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75")
s1 <- stats::lm(fo1_treat, data = df_psid)
e_treat <- s1$residuals
#ii. re78 ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75
fo1_re78 <- as.formula("re78 ~ age + agesq + edu + nodegree+ black + hisp + re74 + re75")
s2 <- stats::lm(fo1_re78, data = df_psid)
summary(s2)
e_re78 <- s2$residuals
m3 <- lm(e_re78 ~ e_treat, data = df_psid)
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learner"))
#c. OPV list:
colnames(df)
#c. OPV list:
colnames(dt_psid)
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learner"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
colnames(dt_psid)
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
colnames(dt_psid)
pretreat.colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
pretreat.colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
dml_data_psid <- DoubleML::DoubleMLData$new(dt,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
pretreat_colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid
summary(dml_data_psid)
summary(dml_data_psid, .fun = list(mean))
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
summary(dml_data_psid, .fun = list(mean))
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid
#d. run DML_Model
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid
#e. Suppress Warning
lgr::get_logger("mlr3")$set_threshold("warn")
#l(x)=E[re78|X=x]
ml_l_rf <- mlr3::lrn("regr.ranger")
#m(x)=E[treat|X=x]
ml_m_rf <- mlr3::lrn("classif.ranger")
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
pretreat_colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners", "ranger"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
pretreat_colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
#l(x)=E[re78|X=x]
ml_l_rf <- mlr3::lrn("regr.ranger")
#m(x)=E[treat|X=x]
ml_m_rf <- mlr3::lrn("classif.ranger")
# Set seeds for cross-fitting
set.seed(3141)
# Set the DML specification
obj_dml_plr <- DoubleML::DoubleMLPLR$new(dml_data_psid,
ml_l = ml_l_rf, ml_m = ml_m_rf,
n_folds = 2,
score = "partialling out",
apply_cross_fitting = TRUE)
#a. Here we install the packages
install_packages_if_needed(c("DoubleML", "data.table", "mlr3", "mlr3learners", "ranger"))
#b. Converting df to dt
dt_psid <- data.table::as.data.table(df_psid)
#c. OPV list:
pretreat_colnames <- c("age", "edu", "black", "hisp", "married", "re74", "re75", "u74", "u75", "nodegree")
#d. run DML_Model
dml_data_psid <- DoubleML::DoubleMLData$new(dt_psid,
y_col = "re78",
d_cols = "treat",
x_cols = pretreat_colnames)
dml_data_psid
#e. Suppress Warning
lgr::get_logger("mlr3")$set_threshold("warn")
#f. "First Stage ML"
#l(x)=E[re78|X=x]
ml_l_rf <- mlr3::lrn("regr.ranger")
#m(x)=E[treat|X=x]
ml_m_rf <- mlr3::lrn("classif.ranger")
#g. set training seed and DML
# Set seeds for cross-fitting
set.seed(3141)
# Set the DML specification
obj_dml_plr <- DoubleML::DoubleMLPLR$new(dml_data_psid,
ml_l = ml_l_rf, ml_m = ml_m_rf,
n_folds = 2,
score = "partialling out",
apply_cross_fitting = TRUE)
#h. fit the DML
obj_dml_plr$fit()
obj_dml_plr
m3 <- lm(e_re78 ~ e_treat, data = df_psid)
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
lmtest::coeftest(m1, vcov. = car::hccm(m1, type = "hc0"))
#add agesq
df_psid <-df_psid %>%
dplyr::mutate(.data=df_psid, agesq = age**2)
#formula
fo <- as.formula("re78 ~ treat + age + agesq + edu + nodegree + black + hisp + re74 + re75")
#lm estimator
m2 <- stats::lm(fo, data = df_psid)
#test
lmtest::coeftest(m2, vcov. = car::hccm(m2, type = "hc0"))
